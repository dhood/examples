# generated from rclcpp_examples/test/test_executable_linking.py.in

import os
import re
import subprocess 
import sys

def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE

_is_linux = sys.platform.lower().startswith('linux')
_is_darwin = sys.platform.lower().startswith('darwin')
_is_windows = sys.platform.lower().startswith('win')

def test_executable():

    rmw_implementation = '@rmw_implementation@'
    executables = '@RCLCPP_EXAMPLES_EXECUTABLE@'.split(';')
    for exe in executables:
        # Check that the executable is linked against the claimed rmw implementation
        if _is_linux:
            cmd = ['ldd', exe]
            search_string = 'lib%s.so' % rmw_implementation
        elif _is_darwin:
            cmd = ['otool', '-L', exe]
            search_string = 'lib%s.dylib' % rmw_implementation
        elif _is_windows:
            cmd = ['dumpbin', '/dependents', exe]
            search_string = '%s.dll' % rmw_implementation
        else:
            raise Exception('Unknown system platform')
        dependencies = subprocess.check_output(cmd)
        pattern = re.compile(search_string.encode(), flags=re.IGNORECASE)
        relevant_links = pattern.findall(dependencies)
        assert len(relevant_links) > 0, \
            "Executable is not linked against RMW implementation '%s'." % rmw_implementation

if __name__ == '__main__':
    test_executable()
